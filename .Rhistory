library(windows)
windows::add_open_Rstudio_here_right_click_context_action()
windows::add_run_R_script_right_click_context_action()
traceback()
windows::add_run_R_script_right_click_context_action()
windows::add_run_R_script_right_click_context_action(F)
windows::add_run_R_script_right_click_context_action(T)
force = FALSE, echo = FALSE
force = TRUE
echo = FALSE
if (!can_find_R_on_PATH() || force)
add_R_to_path(force = force, echo = echo)
devtools::load_all(".")
if (!can_find_R_on_PATH() || force)
add_R_to_path(force = force, echo = echo)
system.file("run_rscript.cmd", package = "TKutils")
pth2launch_script <- system.file("inst/run_rscript.cmd", package = "TKutils")
pth2launch_script
pth2launch_script <- system.file("inst/run_rscript.cmd", package = "windows")
pth2launch_script
library(windows)
windows::add_run_R_script_right_click_context_action()
library(windows)
library(windows)
windows::add_run_R_script_right_click_context_action(T)
system.file("inst/run_rscript.cmd", package = "windows")
pth2launch_script <- system.file("run_rscript.cmd", package = "windows")
pth2launch_script <- system.file("run_rscript.cmd", package = "windows")
pth2launch_script
library(windows)
windows::add_run_R_script_right_click_context_action(T)
?system.file
system.file("run_rscript.cmd", package = "windows")
system.file("run_rscript.cmd", package = "windows", mustWork = TRUE)
normalizePath(pth2launch_script, mustWork = TRUE)
pth2launch_script <- system.file("run_rscript.cmd", package = "windows", mustWork = TRUE)
pth2launch_script <- shQuote(normalizePath(pth2launch_script, mustWork = TRUE))
pth2launch_script
library(windows)
windows::add_run_R_script_right_click_context_action()
windows::add_run_R_script_right_click_context_action(T)
setwd("C:/Users/tkali/Dropbox/R/personal_packages/windows")
setwd("C:/Users/tkali/Dropbox/R/tmp")
rmarkdown::render("foo.Rmd")
shell.exec("C:/Users/tkali/Dropbox/R/tmp")
rmarkdown::pandoc_available()
rmarkdown::pandoc_available
?rmarkdown::pandoc_available
Sys.getenv("RSTUDIO_PANDOC")
# we query the registry directly because we don't want variables like
# "%R_Home" expanded yet. Note, a user PATH is only expanded once, so you
# can't nest user variables. e.g. you can't add %R_PATH% and then define
# %R_PATH% as %R_Home%\\bin\\%R_ARCH% because %R_PATH% will not be expanded
# fully (or at all, really). This is different from system varialbes, which
# are expaned recursively.
current_user_path <- read_user_var_direct_from_registry("PATH")
devtools::load_all("C:/Users/tkali/Dropbox/R/personal_packages/windows")
# we query the registry directly because we don't want variables like
# "%R_Home" expanded yet. Note, a user PATH is only expanded once, so you
# can't nest user variables. e.g. you can't add %R_PATH% and then define
# %R_PATH% as %R_Home%\\bin\\%R_ARCH% because %R_PATH% will not be expanded
# fully (or at all, really). This is different from system varialbes, which
# are expaned recursively.
current_user_path <- read_user_var_direct_from_registry("PATH")
current_user_path
cat(pcnl(p('\t', read_system_var_direct_from_registry("PATH"))), "\n\n")
pandoc <- normalizePath(pth_to_pandoc.exe, mustWork = TRUE)
current_user_path <- read_user_var_direct_from_registry("PATH")
new_PATH <- unique(c(current_user_path, pandoc))
pth_to_pandoc.exe = Sys.getenv("RSTUDIO_PANDOC")
pandoc <- normalizePath(pth_to_pandoc.exe, mustWork = TRUE)
current_user_path <- read_user_var_direct_from_registry("PATH")
new_PATH <- unique(c(current_user_path, pandoc))
new_PATH
new_PATH[-7]
new_PATH <- new_PATH[-7]
normalizePath(new_PATH)
normalizePath(new_PATH[7])
new_PATH[7] <- normalizePath(new_PATH[7])
new_PATH
new_user_path <- new_PATH
new_user_path <- p(new_user_path, collapse = ";")
# escape_percents
new_user_path <- gsub("%", '^%', new_user_path, fixed = TRUE)
# spaces need to be quoted
new_user_path <- gsub("(\\s+)", '"\\1"', new_user_path, perl = TRUE)
# cat(new_user_path)
# We use reg add instead of setx because setx truncates any chars over 1024,
# also, it doesn't let you easily distinguish user PATH from system PATH.
# the only reliable way is to query the registry
add_reg_key("HKCU\\Environment", value = "PATH",
type = "REG_EXPAND_SZ", data = new_user_path,
force = TRUE, echo = echo
)
message("\nThe user PATH variable is now:")
cat(pcnl(p('\t', read_user_var_direct_from_registry("PATH"))), "\n\n")
message("As a reminder, the System PATH is searched before the User PATH")
message("The System PATH is:")
cat(pcnl(p('\t', read_system_var_direct_from_registry("PATH"))), "\n\n")
echo = FALSE
new_user_path <- new_PATH
new_user_path <- p(new_user_path, collapse = ";")
# escape_percents
new_user_path <- gsub("%", '^%', new_user_path, fixed = TRUE)
# spaces need to be quoted
new_user_path <- gsub("(\\s+)", '"\\1"', new_user_path, perl = TRUE)
# cat(new_user_path)
# We use reg add instead of setx because setx truncates any chars over 1024,
# also, it doesn't let you easily distinguish user PATH from system PATH.
# the only reliable way is to query the registry
add_reg_key("HKCU\\Environment", value = "PATH",
type = "REG_EXPAND_SZ", data = new_user_path,
force = TRUE, echo = echo
)
message("\nThe user PATH variable is now:")
cat(pcnl(p('\t', read_user_var_direct_from_registry("PATH"))), "\n\n")
message("As a reminder, the System PATH is searched before the User PATH")
message("The System PATH is:")
cat(pcnl(p('\t', read_system_var_direct_from_registry("PATH"))), "\n\n")
rmarkdown::pandoc_available
rmarkdown:::find_pandoc
rmarkdown:::find_program
Sys.which("pandoc")
set_R_Home_user_variable()
devtools::load_all(".")
set_R_Home_user_variable()
set_R_Home_user_variable
rmarkdown::run("inst/shinyrmd.Rmd")
rmarkdown::run
rmarkdown::render("inst/shinyrmd.Rmd")
rmarkdown::run("inst/foo.Rmd")
rmarkdown::run("inst/foo.Rmd")
yaml::yaml.load_file("inst/foo.Rmd")
yaml::  as.yaml(list(foo=1:10, bar=c("test1", "test2")))
yaml::  as.yaml(list(foo=1:10, bar=c("test1", "test2"))) %>% cat
library(maglite)
yaml::  as.yaml(list(foo=1:10, bar=c("test1", "test2"))) %>% cat
as.yaml(data.frame(a=1:10, b=letters[1:10], c=11:20))
library(yaml)
as.yaml(data.frame(a=1:10, b=letters[1:10], c=11:20))
as.yaml(data.frame(a=1:10, b=letters[1:10], c=11:20)) %>% cat
